{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport web3 from './web3';\nimport ElectionFactory from './Build/ElectionFact.json';\n\n// Debug the imported JSON structure\nconsole.log('ElectionFactory content:', {\n  hasABI: !!ElectionFactory.abi,\n  hasInterface: !!ElectionFactory.interface,\n  hasCompilerOutput: !!ElectionFactory.compilerOutput\n});\n\n// Try multiple possible ABI locations\nvar contractABI = ElectionFactory.abi || ElectionFactory.interface && JSON.parse(ElectionFactory.interface) || ElectionFactory.compilerOutput && ElectionFactory.compilerOutput.abi;\nif (!contractABI) {\n  throw new Error(\"\\n    No ABI found in contract JSON. Check your compilation output.\\n    Available keys: \".concat(_Object$keys(ElectionFactory).join(', '), \"\\n  \"));\n}\nvar CONTRACT_ADDRESS = '0x68fB0FbF52d2b5b14451bE10a1FDe220b428f450';\nvar instance = new web3.eth.Contract(contractABI, CONTRACT_ADDRESS);\n\n// Verify contract methods\nconsole.log('Contract methods:', _Object$keys(instance.methods));\nexport default instance;","map":{"version":3,"names":["web3","ElectionFactory","console","log","hasABI","abi","hasInterface","interface","hasCompilerOutput","compilerOutput","contractABI","JSON","parse","Error","concat","_Object$keys","join","CONTRACT_ADDRESS","instance","eth","Contract","methods"],"sources":["C:/Users/Sathyajothi/Desktop/BlockChainVoting/Ethereum/election_factory.js"],"sourcesContent":["import web3 from './web3';\r\nimport ElectionFactory from './Build/ElectionFact.json';\r\n\r\n// Debug the imported JSON structure\r\nconsole.log('ElectionFactory content:', {\r\n    hasABI: !!ElectionFactory.abi,\r\n    hasInterface: !!ElectionFactory.interface,\r\n    hasCompilerOutput: !!ElectionFactory.compilerOutput\r\n});\r\n\r\n// Try multiple possible ABI locations\r\nconst contractABI = ElectionFactory.abi ||\r\n    (ElectionFactory.interface && JSON.parse(ElectionFactory.interface)) ||\r\n    (ElectionFactory.compilerOutput && ElectionFactory.compilerOutput.abi);\r\n\r\nif (!contractABI) {\r\n    throw new Error(`\r\n    No ABI found in contract JSON. Check your compilation output.\r\n    Available keys: ${Object.keys(ElectionFactory).join(', ')}\r\n  `);\r\n}\r\n\r\nconst CONTRACT_ADDRESS = '0x68fB0FbF52d2b5b14451bE10a1FDe220b428f450';\r\n\r\nconst instance = new web3.eth.Contract(\r\n    contractABI,\r\n    CONTRACT_ADDRESS\r\n);\r\n\r\n// Verify contract methods\r\nconsole.log('Contract methods:', Object.keys(instance.methods));\r\n\r\nexport default instance;"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,eAAe,MAAM,2BAA2B;;AAEvD;AACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE;EACpCC,MAAM,EAAE,CAAC,CAACH,eAAe,CAACI,GAAG;EAC7BC,YAAY,EAAE,CAAC,CAACL,eAAe,CAACM,SAAS;EACzCC,iBAAiB,EAAE,CAAC,CAACP,eAAe,CAACQ;AACzC,CAAC,CAAC;;AAEF;AACA,IAAMC,WAAW,GAAGT,eAAe,CAACI,GAAG,IAClCJ,eAAe,CAACM,SAAS,IAAII,IAAI,CAACC,KAAK,CAACX,eAAe,CAACM,SAAS,CAAE,IACnEN,eAAe,CAACQ,cAAc,IAAIR,eAAe,CAACQ,cAAc,CAACJ,GAAI;AAE1E,IAAI,CAACK,WAAW,EAAE;EACd,MAAM,IAAIG,KAAK,6FAAAC,MAAA,CAEGC,YAAA,CAAYd,eAAe,CAAC,CAACe,IAAI,CAAC,IAAI,CAAC,SAC1D,CAAC;AACJ;AAEA,IAAMC,gBAAgB,GAAG,4CAA4C;AAErE,IAAMC,QAAQ,GAAG,IAAIlB,IAAI,CAACmB,GAAG,CAACC,QAAQ,CAClCV,WAAW,EACXO,gBACJ,CAAC;;AAED;AACAf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEY,YAAA,CAAYG,QAAQ,CAACG,OAAO,CAAC,CAAC;AAE/D,eAAeH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}