{"ast":null,"code":"import Web3 from 'web3';\nimport ElectionFactory from './Build/ElectionFact.json';\n\n// 1. First verify the ABI structure\nconsole.log('Contract ABI:', ElectionFactory.abi);\n\n// 2. Use a more reliable provider initialization\nvar web3 = new Web3(window.ethereum || 'http://localhost:8545');\n\n// 3. Hardcode the exact deployed contract address\nvar CONTRACT_ADDRESS = '0x16795911522115Ef7D4F099f1aBe1F76C2dB6AC8';\n\n// 4. Create contract instance with proper error handling\nvar instance;\ntry {\n  instance = new web3.eth.Contract(ElectionFactory.abi, CONTRACT_ADDRESS);\n\n  // Verify the contract is deployed\n  web3.eth.getCode(CONTRACT_ADDRESS).then(function (code) {\n    if (code === '0x') {\n      console.error('Contract not deployed at address:', CONTRACT_ADDRESS);\n    } else {\n      console.log('Contract successfully initialized');\n    }\n  });\n} catch (error) {\n  console.error('Contract initialization failed:', error);\n  throw error;\n}\nexport default instance;","map":{"version":3,"names":["Web3","ElectionFactory","console","log","abi","web3","window","ethereum","CONTRACT_ADDRESS","instance","eth","Contract","getCode","then","code","error"],"sources":["C:/Users/Sathyajothi/Desktop/BlockChainVoting/Ethereum/election_factory.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport ElectionFactory from './Build/ElectionFact.json';\r\n\r\n// 1. First verify the ABI structure\r\nconsole.log('Contract ABI:', ElectionFactory.abi);\r\n\r\n// 2. Use a more reliable provider initialization\r\nconst web3 = new Web3(window.ethereum || 'http://localhost:8545');\r\n\r\n// 3. Hardcode the exact deployed contract address\r\nconst CONTRACT_ADDRESS = '0x16795911522115Ef7D4F099f1aBe1F76C2dB6AC8';\r\n\r\n// 4. Create contract instance with proper error handling\r\nlet instance;\r\ntry {\r\n    instance = new web3.eth.Contract(\r\n        ElectionFactory.abi,\r\n        CONTRACT_ADDRESS\r\n    );\r\n\r\n    // Verify the contract is deployed\r\n    web3.eth.getCode(CONTRACT_ADDRESS)\r\n        .then(code => {\r\n            if (code === '0x') {\r\n                console.error('Contract not deployed at address:', CONTRACT_ADDRESS);\r\n            } else {\r\n                console.log('Contract successfully initialized');\r\n            }\r\n        });\r\n} catch (error) {\r\n    console.error('Contract initialization failed:', error);\r\n    throw error;\r\n}\r\n\r\nexport default instance;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,eAAe,MAAM,2BAA2B;;AAEvD;AACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,eAAe,CAACG,GAAG,CAAC;;AAEjD;AACA,IAAMC,IAAI,GAAG,IAAIL,IAAI,CAACM,MAAM,CAACC,QAAQ,IAAI,uBAAuB,CAAC;;AAEjE;AACA,IAAMC,gBAAgB,GAAG,4CAA4C;;AAErE;AACA,IAAIC,QAAQ;AACZ,IAAI;EACAA,QAAQ,GAAG,IAAIJ,IAAI,CAACK,GAAG,CAACC,QAAQ,CAC5BV,eAAe,CAACG,GAAG,EACnBI,gBACJ,CAAC;;EAED;EACAH,IAAI,CAACK,GAAG,CAACE,OAAO,CAACJ,gBAAgB,CAAC,CAC7BK,IAAI,CAAC,UAAAC,IAAI,EAAI;IACV,IAAIA,IAAI,KAAK,IAAI,EAAE;MACfZ,OAAO,CAACa,KAAK,CAAC,mCAAmC,EAAEP,gBAAgB,CAAC;IACxE,CAAC,MAAM;MACHN,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IACpD;EACJ,CAAC,CAAC;AACV,CAAC,CAAC,OAAOY,KAAK,EAAE;EACZb,OAAO,CAACa,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EACvD,MAAMA,KAAK;AACf;AAEA,eAAeN,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}