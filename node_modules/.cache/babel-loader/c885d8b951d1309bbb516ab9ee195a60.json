{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport Web3 from './web3';\nimport ElectionFactory from './Build/ElectionFact.json';\n\n// Debug: Verify imports\nconsole.log('Web3 imported:', Web3 ? 'Success' : 'Failed');\nconsole.log('ElectionFactory ABI:', ElectionFactory.abi ? 'Exists' : 'Missing');\n\n// Configuration\nvar CONTRACT_ADDRESS = '0x16795911522115Ef7D4F099f1aBe1F76C2dB6AC8';\n\n// Initialize contract with robust error handling\nvar initializeContract = function initializeContract() {\n  try {\n    // Verify Web3 is properly initialized\n    if (!Web3 || !Web3.eth) {\n      throw new Error(\"Web3 not properly initialized\");\n    }\n\n    // Verify ABI exists\n    if (!ElectionFactory.abi) {\n      throw new Error(\"Contract ABI not found\");\n    }\n\n    // Create contract instance\n    var _instance = new Web3.eth.Contract(ElectionFactory.abi, CONTRACT_ADDRESS);\n    console.log('Contract instance created successfully');\n    console.log('Available methods:', _Object$keys(_instance.methods));\n    return _instance;\n  } catch (err) {\n    console.error('Contract initialization error:', err);\n    throw new Error(\"Contract initialization failed: \".concat(err.message));\n  }\n};\nvar instance = initializeContract();\nexport default instance;","map":{"version":3,"names":["Web3","ElectionFactory","console","log","abi","CONTRACT_ADDRESS","initializeContract","eth","Error","instance","Contract","_Object$keys","methods","err","error","concat","message"],"sources":["C:/Users/Sathyajothi/Desktop/BlockChainVoting/Ethereum/election_factory.js"],"sourcesContent":["import Web3 from './web3';\r\nimport ElectionFactory from './Build/ElectionFact.json';\r\n\r\n// Debug: Verify imports\r\nconsole.log('Web3 imported:', Web3 ? 'Success' : 'Failed');\r\nconsole.log('ElectionFactory ABI:', ElectionFactory.abi ? 'Exists' : 'Missing');\r\n\r\n// Configuration\r\nconst CONTRACT_ADDRESS = '0x16795911522115Ef7D4F099f1aBe1F76C2dB6AC8';\r\n\r\n// Initialize contract with robust error handling\r\nconst initializeContract = () => {\r\n    try {\r\n        // Verify Web3 is properly initialized\r\n        if (!Web3 || !Web3.eth) {\r\n            throw new Error(\"Web3 not properly initialized\");\r\n        }\r\n\r\n        // Verify ABI exists\r\n        if (!ElectionFactory.abi) {\r\n            throw new Error(\"Contract ABI not found\");\r\n        }\r\n\r\n        // Create contract instance\r\n        const instance = new Web3.eth.Contract(\r\n            ElectionFactory.abi,\r\n            CONTRACT_ADDRESS\r\n        );\r\n\r\n        console.log('Contract instance created successfully');\r\n        console.log('Available methods:', Object.keys(instance.methods));\r\n\r\n        return instance;\r\n    } catch (err) {\r\n        console.error('Contract initialization error:', err);\r\n        throw new Error(`Contract initialization failed: ${err.message}`);\r\n    }\r\n};\r\n\r\nconst instance = initializeContract();\r\nexport default instance;"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,eAAe,MAAM,2BAA2B;;AAEvD;AACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,GAAG,SAAS,GAAG,QAAQ,CAAC;AAC1DE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,eAAe,CAACG,GAAG,GAAG,QAAQ,GAAG,SAAS,CAAC;;AAE/E;AACA,IAAMC,gBAAgB,GAAG,4CAA4C;;AAErE;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EAC7B,IAAI;IACA;IACA,IAAI,CAACN,IAAI,IAAI,CAACA,IAAI,CAACO,GAAG,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACpD;;IAEA;IACA,IAAI,CAACP,eAAe,CAACG,GAAG,EAAE;MACtB,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;IAC7C;;IAEA;IACA,IAAMC,SAAQ,GAAG,IAAIT,IAAI,CAACO,GAAG,CAACG,QAAQ,CAClCT,eAAe,CAACG,GAAG,EACnBC,gBACJ,CAAC;IAEDH,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrDD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,YAAA,CAAYF,SAAQ,CAACG,OAAO,CAAC,CAAC;IAEhE,OAAOH,SAAQ;EACnB,CAAC,CAAC,OAAOI,GAAG,EAAE;IACVX,OAAO,CAACY,KAAK,CAAC,gCAAgC,EAAED,GAAG,CAAC;IACpD,MAAM,IAAIL,KAAK,oCAAAO,MAAA,CAAoCF,GAAG,CAACG,OAAO,CAAE,CAAC;EACrE;AACJ,CAAC;AAED,IAAMP,QAAQ,GAAGH,kBAAkB,CAAC,CAAC;AACrC,eAAeG,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}