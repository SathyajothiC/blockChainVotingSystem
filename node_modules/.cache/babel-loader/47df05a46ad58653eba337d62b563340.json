{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\n// sharedElectionData.js\nvar sharedElectionData = {\n  address: '0xa579675518D32c99B6f1929AFe8397d42D896f84',\n  name: 'Annual Board Election',\n  description: 'Election for Board of Directors 2023',\n  voters: 150,\n  candidates: 5,\n  totalVotes: 120,\n  candidateData: [{\n    email: 'john.doe@company.com',\n    name: 'John Doe',\n    position: 'CEO',\n    votes: 45,\n    bio: 'Experienced leader with 10+ years in industry'\n  }, {\n    email: 'jane.smith@company.com',\n    name: 'Jane Smith',\n    position: 'CTO',\n    votes: 38,\n    bio: 'Technology innovator and strategic thinker'\n  }, {\n    email: 'robert.johnson@company.com',\n    name: 'Robert Johnson',\n    position: 'CFO',\n    votes: 22,\n    bio: 'Financial expert with proven track record'\n  }, {\n    email: 'sarah.williams@company.com',\n    name: 'Sarah Williams',\n    position: 'COO',\n    votes: 10,\n    bio: 'Operations specialist focused on efficiency'\n  }, {\n    email: 'michael.brown@company.com',\n    name: 'Michael Brown',\n    position: 'CMO',\n    votes: 5,\n    bio: 'Marketing guru with creative vision'\n  }],\n  electionStatus: 'active',\n  startDate: '2023-10-01',\n  endDate: '2023-10-15'\n};\n\n// Listeners array to notify components of data changes\nvar listeners = new _Set();\nexport var getSharedElectionData = function getSharedElectionData() {\n  return _objectSpread({}, sharedElectionData); // Return a copy to prevent direct mutation\n};\nexport var updateSharedElectionData = function updateSharedElectionData(newData) {\n  sharedElectionData = _objectSpread({}, sharedElectionData, newData);\n  notifyListeners();\n  return sharedElectionData;\n};\nexport var addCandidateToSharedData = function addCandidateToSharedData(candidate) {\n  var newCandidate = _objectSpread({}, candidate, {\n    votes: candidate.votes || 0,\n    bio: candidate.bio || \"New candidate\"\n  });\n  sharedElectionData.candidateData.push(newCandidate);\n  sharedElectionData.candidates = sharedElectionData.candidateData.length;\n  notifyListeners();\n  return sharedElectionData;\n};\nexport var resetSharedElectionData = function resetSharedElectionData() {\n  sharedElectionData = {\n    address: '0xa579675518D32c99B6f1929AFe8397d42D896f84',\n    name: 'Annual Board Election',\n    description: 'Election for Board of Directors 2023',\n    voters: 150,\n    candidates: 5,\n    totalVotes: 120,\n    candidateData: [{\n      email: 'john.doe@company.com',\n      name: 'John Doe',\n      position: 'CEO',\n      votes: 45,\n      bio: 'Experienced leader with 10+ years in industry'\n    }, {\n      email: 'jane.smith@company.com',\n      name: 'Jane Smith',\n      position: 'CTO',\n      votes: 38,\n      bio: 'Technology innovator and strategic thinker'\n    }, {\n      email: 'robert.johnson@company.com',\n      name: 'Robert Johnson',\n      position: 'CFO',\n      votes: 22,\n      bio: 'Financial expert with proven track record'\n    }, {\n      email: 'sarah.williams@company.com',\n      name: 'Sarah Williams',\n      position: 'COO',\n      votes: 10,\n      bio: 'Operations specialist focused on efficiency'\n    }, {\n      email: 'michael.brown@company.com',\n      name: 'Michael Brown',\n      position: 'CMO',\n      votes: 5,\n      bio: 'Marketing guru with creative vision'\n    }],\n    electionStatus: 'active',\n    startDate: '2023-10-01',\n    endDate: '2023-10-15'\n  };\n  notifyListeners();\n  return sharedElectionData;\n};\n\n// Subscribe to data changes\nexport var subscribeToUpdates = function subscribeToUpdates(callback) {\n  listeners.add(callback);\n\n  // Return unsubscribe function\n  return function () {\n    listeners.delete(callback);\n  };\n};\n\n// Notify all listeners of data changes\nvar notifyListeners = function notifyListeners() {\n  console.log('Notifying listeners:', listeners.size);\n  var currentData = getSharedElectionData();\n  listeners.forEach(function (callback) {\n    try {\n      callback(currentData);\n    } catch (error) {\n      console.error('Error in listener callback:', error);\n    }\n  });\n};\n\n// Force an update to all listeners\nexport var forceUpdate = function forceUpdate() {\n  notifyListeners();\n};","map":{"version":3,"names":["sharedElectionData","address","name","description","voters","candidates","totalVotes","candidateData","email","position","votes","bio","electionStatus","startDate","endDate","listeners","_Set","getSharedElectionData","_objectSpread","updateSharedElectionData","newData","notifyListeners","addCandidateToSharedData","candidate","newCandidate","push","length","resetSharedElectionData","subscribeToUpdates","callback","add","delete","console","log","size","currentData","forEach","error","forceUpdate"],"sources":["C:/Users/Sathyajothi/Desktop/BlockChainVoting/components/sharedElectionData .js"],"sourcesContent":["// sharedElectionData.js\r\nlet sharedElectionData = {\r\n    address: '0xa579675518D32c99B6f1929AFe8397d42D896f84',\r\n    name: 'Annual Board Election',\r\n    description: 'Election for Board of Directors 2023',\r\n    voters: 150,\r\n    candidates: 5,\r\n    totalVotes: 120,\r\n    candidateData: [\r\n        {\r\n            email: 'john.doe@company.com',\r\n            name: 'John Doe',\r\n            position: 'CEO',\r\n            votes: 45,\r\n            bio: 'Experienced leader with 10+ years in industry'\r\n        },\r\n        {\r\n            email: 'jane.smith@company.com',\r\n            name: 'Jane Smith',\r\n            position: 'CTO',\r\n            votes: 38,\r\n            bio: 'Technology innovator and strategic thinker'\r\n        },\r\n        {\r\n            email: 'robert.johnson@company.com',\r\n            name: 'Robert Johnson',\r\n            position: 'CFO',\r\n            votes: 22,\r\n            bio: 'Financial expert with proven track record'\r\n        },\r\n        {\r\n            email: 'sarah.williams@company.com',\r\n            name: 'Sarah Williams',\r\n            position: 'COO',\r\n            votes: 10,\r\n            bio: 'Operations specialist focused on efficiency'\r\n        },\r\n        {\r\n            email: 'michael.brown@company.com',\r\n            name: 'Michael Brown',\r\n            position: 'CMO',\r\n            votes: 5,\r\n            bio: 'Marketing guru with creative vision'\r\n        }\r\n    ],\r\n    electionStatus: 'active',\r\n    startDate: '2023-10-01',\r\n    endDate: '2023-10-15'\r\n};\r\n\r\n// Listeners array to notify components of data changes\r\nconst listeners = new Set();\r\n\r\nexport const getSharedElectionData = () => {\r\n    return { ...sharedElectionData }; // Return a copy to prevent direct mutation\r\n};\r\n\r\nexport const updateSharedElectionData = (newData) => {\r\n    sharedElectionData = { ...sharedElectionData, ...newData };\r\n    notifyListeners();\r\n    return sharedElectionData;\r\n};\r\n\r\nexport const addCandidateToSharedData = (candidate) => {\r\n    const newCandidate = {\r\n        ...candidate,\r\n        votes: candidate.votes || 0,\r\n        bio: candidate.bio || \"New candidate\"\r\n    };\r\n\r\n    sharedElectionData.candidateData.push(newCandidate);\r\n    sharedElectionData.candidates = sharedElectionData.candidateData.length;\r\n\r\n    notifyListeners();\r\n    return sharedElectionData;\r\n};\r\n\r\nexport const resetSharedElectionData = () => {\r\n    sharedElectionData = {\r\n        address: '0xa579675518D32c99B6f1929AFe8397d42D896f84',\r\n        name: 'Annual Board Election',\r\n        description: 'Election for Board of Directors 2023',\r\n        voters: 150,\r\n        candidates: 5,\r\n        totalVotes: 120,\r\n        candidateData: [\r\n            {\r\n                email: 'john.doe@company.com',\r\n                name: 'John Doe',\r\n                position: 'CEO',\r\n                votes: 45,\r\n                bio: 'Experienced leader with 10+ years in industry'\r\n            },\r\n            {\r\n                email: 'jane.smith@company.com',\r\n                name: 'Jane Smith',\r\n                position: 'CTO',\r\n                votes: 38,\r\n                bio: 'Technology innovator and strategic thinker'\r\n            },\r\n            {\r\n                email: 'robert.johnson@company.com',\r\n                name: 'Robert Johnson',\r\n                position: 'CFO',\r\n                votes: 22,\r\n                bio: 'Financial expert with proven track record'\r\n            },\r\n            {\r\n                email: 'sarah.williams@company.com',\r\n                name: 'Sarah Williams',\r\n                position: 'COO',\r\n                votes: 10,\r\n                bio: 'Operations specialist focused on efficiency'\r\n            },\r\n            {\r\n                email: 'michael.brown@company.com',\r\n                name: 'Michael Brown',\r\n                position: 'CMO',\r\n                votes: 5,\r\n                bio: 'Marketing guru with creative vision'\r\n            }\r\n        ],\r\n        electionStatus: 'active',\r\n        startDate: '2023-10-01',\r\n        endDate: '2023-10-15'\r\n    };\r\n\r\n    notifyListeners();\r\n    return sharedElectionData;\r\n};\r\n\r\n// Subscribe to data changes\r\nexport const subscribeToUpdates = (callback) => {\r\n    listeners.add(callback);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n        listeners.delete(callback);\r\n    };\r\n};\r\n\r\n// Notify all listeners of data changes\r\nconst notifyListeners = () => {\r\n    console.log('Notifying listeners:', listeners.size);\r\n    const currentData = getSharedElectionData();\r\n    listeners.forEach(callback => {\r\n        try {\r\n            callback(currentData);\r\n        } catch (error) {\r\n            console.error('Error in listener callback:', error);\r\n        }\r\n    });\r\n};\r\n\r\n// Force an update to all listeners\r\nexport const forceUpdate = () => {\r\n    notifyListeners();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}